CSC720 Homework 3
=================

Due Date: Tuesday, April 10, 2018 By Midnight

1. (20 points) 
--------------

Consider the grammar G given by:

    S → ε | AB | XB
    T → AB | XB
    X → AT
    A → a
    B → b

Is w = aaabbb in L(G)? Using CKY Algorithm to decide if w is in L(G). A
CKY Triangular Table is shown in Table 1.


w is in L(G) as shown by the following table. The top left position includes the start state, so we know that aaabbb is recognized by the grammar.


<pre style="line-height:1">
┌─────┐
│ S,T │
├─────┼─────┐
│ X   │     │
├─────┼─────┼─────┐
│     │ S,T │     │
├─────┼─────┼─────┼─────┐
│     │ X   │     │     │
├─────┼─────┼─────┼─────┼─────┐
│     │     │ S,T │     │     │
├─────┼─────┼─────┼─────┼─────┼─────┐
│ A   │ A   │ A   │ B   │ B   │ B   │
├─────┼─────┼─────┼─────┼─────┼─────┤
│ a   │ a   │ a   │ b   │ b   │ b   │
└─────┴─────┴─────┴─────┴─────┴─────┘
</pre>

w is in L(G).

2. (20 points)
--------------

(Exercise 3.2) This exercise concerns TM M1, whose
description and state diagram appear in Example 3.9. In each of the
parts, give the sequence of configurations that M1 enters when started
on the indicated input string.

![](./media/image1.png)

d\. 10\#11.

     q₁ 10#11   
    x q₃ 0#11
    x0 q₃ #11
    x0# q₅ 11
    x0 q₆ #x1
    x q₇ 0#x1
     q₇ x0#x1
    x q₁ 0#x1
    xx q₂ #x1
    xx# q₄ x1
    Halted as reject

e\. 10\#10.

     q₁ 10#10
    x q₃ 0#10
    x0 q₃ #10
    x0# q₅ 10
    x0 q₆ #x0
    x q₇ 0#x0
     q₇ x0#x0
    x q₁ 0#x0
    xx q₂ #x0
    xx# q₄ x0
    xx#x q₄ 0
    xx# q₆ xx
    xx q₆ #xx
    x q₇ x#xx
    xx q₁ #xx
    xx# q₈ xx
    xx#x q₈ x
    xx#xx q₈
    xx#xx qaccept
    Halt as accept

3. (10 points)
--------------

> What is Turing recognizable? What is Turing decidable? What is the difference between them?

A language L is Turing recognizable if there exists a Turing machine that will accept w for all w∈L. 

A language is Turing decidable if there exists a Turing machine that can both accept all strings in the language and reject w for all w∈$\overline{L}$ in finite time.

The key to decidability is that you must be able to design an algorithm that can finish executing with guaranteed correct results. In the case of language, this means that the machine must halt and not loop indefinitely for all inputs.

4. (10 points)
-------------- 

Let A = { aⁿbⁿcⁿ | n ≥ 0 }.

1.  Is A a regular language?

No. It does not adhere to the Pumping Lemma for regular languages.

2.  Is A a context free language?

No. It does not adhere to the Pumping Lemma for context free languages.

3.  Is A Turing recognizable?

Yes. A Turing machine can be constructed to accept on any language in A.

4.  Is A Turing decidable?

Yes. Given a finite input string, a Turing machine can be contstructed to accept all strings in A and reject all strings not in A.

5. (20 points) 
--------------

(Exercise 4.6) Let X be the set {1, 2, 3, 4, 5} and Y be
the set {6, 7, 8, 9, 10}. We describe the functions f : X→Y and g : X→Y
in the following tables. Answer each part and give a reason for each
negative answer.

![](./media/image2.png)

a\. Is f one-to-one?

No. 6 is the result of multiple values in the domain (1,3,5).

b\. Is f onto?

No. Several elements of Y are not reachable (8,9,10).

c\. Is f a correspondence?

No. It is not both one-to-one and onto.

d\. Is g one-to-one?

Yes. Each element in the domain maps to exactly one element in the codomain.

e\. Is g onto?

Yes. Every element in Y is in the codomain and reachable from an element in the domain.

f\. Is g a correspondence?

Yes. It is both one-to-one and onto (bijective). 

6. (20 points)
--------------

(Exercise 4.8) Let T = { (i, j, k) | i, j, k ϵ ℕ}. Show
that T is countable.

T is countable if it is either finite or it has the same size as the set of nutural numbers (ℕ). T is clearly infinite as its members are drawn from ℕ, so we will show that it is countable by demonstrating that it is the same size as ℕ.

Remember that two sets have the same size if we can create a bijective function mapping one to the other. A bijective function is one that is both injective (one-to-one) and surjective (onto). In essense, we will demonstrate that each element in T can be sequentially assigned to a natural number starting from 1.

One simple way to consider this problem is by applying Cantor's diagonalization method. This is easiest to visualize in 2 dimensions, but we will need to use 3 dimensions for this proof. We will simply consider each "diagonal" to be the set of new items produced for an incremental maxiumum value of i, j, and k. For example:

    Diagonal 1: [(1, 1, 1)]
    Diagonal 2: [(2, 1, 1), (1, 2, 1), (1, 1, 2), (1, 2, 2), (2, 1, 2), (2, 2, 1), (2, 2, 2)]
    …

Each diagonal is finite and enumerable, so we can create a bijective function that maps each item in T to an incrementally higher natural number as:

```python
import math

def f(n):
  # Convert to 0-based counting
  n = n - 1

  # Calculate the current number system base
  base = 1 + int(n ** (1/3))

  i = math.floor(n / base**2)
  j = math.floor((n / base) % base)
  k = n % base

  return (i+1, j+1, k+1)

for n in range(1, 25):
  print("f(%d) = %s" % (n, str(f(n))))
```
